name: Building Wheels

on:
  workflow_dispatch:
  release:
    types: [created]
    branches: [master]

jobs:
  wheel:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        # support version based on: https://download.pytorch.org/whl/torch/
        # https://github.com/pytorch/pytorch/blob/main/RELEASE.md#release-compatibility-matrix
        python-version: ['3.9', '3.12', '3.13']
        torch-version: [2.4.0, 2.5.0, 2.6.0, 2.7.0]
        cuda-version: ['cpu', 'cu118', 'cu121', 'cu124', 'cu126', 'cu128']
        exclude:
          - torch-version: 2.4.0
            cuda-version: 'cu126'
          - torch-version: 2.4.0
            cuda-version: 'cu128'
          - torch-version: 2.4.0
            python-version: '3.13'
          - torch-version: 2.5.0
            cuda-version: 'cu126'
          - torch-version: 2.5.0
            cuda-version: 'cu128'
          - torch-version: 2.5.0
            python-version: '3.13'
          - torch-version: 2.6.0
            cuda-version: 'cu121'
          - torch-version: 2.6.0
            cuda-version: 'cu128'
          - torch-version: 2.7.0
            cuda-version: 'cu121'
          - torch-version: 2.7.0
            cuda-version: 'cu124'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade setuptools
          pip install ninja wheel

      - name: Free up disk space
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          # remove swap storage
          sudo swapoff -a || true
          sudo rm -f /mnt/swapfile || true

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          bash .github/workflows/cuda/${{ runner.os }}.sh ${{ matrix.cuda-version }}

      - name: Install PyTorch ${{ matrix.torch-version }}+${{ matrix.cuda-version }}
        run: |
          pip install torch==${{ matrix.torch-version }} --extra-index-url https://download.pytorch.org/whl/${{ matrix.cuda-version }}
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "import torch; print('CUDA Available:', torch.cuda.is_available())"

      - name: Set version
        run: |
          VERSION=`cat falkon/VERSION`
          TORCH_VERSION=`echo "pt${{ matrix.torch-version }}" | sed "s/..$//" | sed "s/\.//g"`
          CUDA_VERSION=`echo ${{ matrix.cuda-version }}`
          echo "New version name: $VERSION+$TORCH_VERSION$CUDA_VERSION"
          sed -i "s/$VERSION/$VERSION+$TORCH_VERSION$CUDA_VERSION/" falkon/VERSION
        shell:
          bash

      - name: Install main package for CPU
        if: ${{ matrix.cuda-version == 'cpu' }}
        run: |
          FORCE_ONLY_CPU=1 python setup.py bdist_wheel --dist-dir=dist
          # FORCE_ONLY_CPU=1 pip install --no-build-isolation --editable .
        shell:
          bash

      - name: Install main package for GPU
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          source .github/workflows/cuda/${{ runner.os }}-env.sh ${{ matrix.cuda-version }}
          python setup.py bdist_wheel --dist-dir=dist
          # pip install --no-build-isolation --editable .
        shell:
          bash

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: torch-${{ matrix.torch-version }}_${{ matrix.cuda-version }}_${{ matrix.python-version }}
          path: dist/*.whl
